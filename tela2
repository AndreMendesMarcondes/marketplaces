from os import replace
import tkinter
from pandas.core.reshape.concat import concat
def imports()
    import requests
    import pandas as pd
    import json
    import pyodbc
    import tkinter as tk
    from tkinter import *
    from tkinter import ttk
    from tkinter import messagebox
    from pandas import json_normalize
    from datetime import date
    from datetime import datetime, timedelta
    import threading
    import string

server = '192.168.1.15'
database = 'PROTHEUS_ZANOTTI_PRODUCAO'
username = 'totvs'
password = 'totvsip'
conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
cursor = conn.cursor()
df_cod_pedido = []
df_cod_atendimento = []


sub_link1= 'Login'
payload1={"login_token": "27efe191bb0f077c38fae0fe3970863c9ecee6017c60a79f430e58a598fa52e578f43a64b7fbdc230d5c599207607b3f"}
post_get_put1="POST"
def api_ideris(sub_link,payload,post_get_put):
        url_ideris = 'http://api.ideris.com.br/'+sub_link
        payload_ideris = json.dumps(payload)
        headers = {"Content-Type": "application/json"}
        response_ideris = requests.request(post_get_put, url_ideris, headers=headers, data=payload_ideris)
        response_ideris = str(response_ideris.text)
        response_ideris = response_ideris.replace('"', "", 2)
var_timedelta1="days=-20"
def data_atual(var_timedelta):
    data_atual = date.today()
    data_atual3 = data_atual.strftime("%Y%m%d")
    data_atual2 = (date.today() + timedelta(var_timedelta))
    data_atual2 = data_atual2.strftime("%Y-%m-%d")
    data_atualizacao1 = datetime.today()
    data_atualizacao = data_atualizacao1.strftime("%d/%m/%Y %H:%M:%S")
    data_atual2 = (date.today() + timedelta(var_timedelta))
    data_atual2 = data_atual2.strftime("%Y-%m-%d")
    data_atualizacao1 = datetime.today()
    data_atualizacao = data_atualizacao1.strftime("%d/%m/%Y %H:%M:%S")

def divisao_ddmmaa(data_pedido1):
    ano = data_pedido[0:4]
    mes = data_pedido[5:7]
    dia = data_pedido[8:10]
    data_pedido = ano + mes + dia

aviso_novo_pedido = 3

def atualiza_pedidos():
    if aviso_novo_pedido = 3 or 1:
    return api_ideris(sub_link1,payload1,post_get_put1)
    return data_atual(var_delta1)

    select_data_ultimo_pedido = ""
    data_ultimo_pedido = ''


    url_pedidos = "http://api.ideris.com.br/ListaPedido?dataInicial=" + data_ultimo_pedido
    headers_pedidos = {
        "Authorization": response_ideris,
        "Content-Type": "application/json"
    }
    response_pedidos = requests.request("GET", url_pedidos, headers=headers_pedidos)
    response_pedidos = json.loads(response_pedidos.content)
    pedidos = pd.DataFrame.from_dict(json_normalize(response_pedidos), orient='columns')
    qtde_pedidos_periodo = pedidos.iloc[0,4]
    pedidos = pedidos.iloc[0, 0]
    pedidos = pd.DataFrame(pedidos)
    novos_pedidos = pd.DataFrame()
    novos_pedidos0 = pd.DataFrame(
        columns=['id_pedido', 'cod_pedido', 'marketplace', 'status_pedido', 'data_pedido', 'valor_total_com_frete',
                 'valor_total', 'tarifa_envio', 'tarifa_venda_marketplace', 'cod_entrega', 'tipo_entrega',
                 'cod_rastreio', 'cliente', 'cpf_cnpj', 'telefone', 'email', 'endereco', 'cep', 'bairro', 'cidade',
                 'estado', 'observacao', 'responsavel_receber', 'data_criacao', 'titulo_produto', 'sku', 'qtde',
                 'preco_unitario', 'cod_pagamento', 'aprovacao_pagamento', 'status_pagamento', 'forma_pagamento',
                 'parcelas'])
    linha = 0

    if pedidos.empty:
        var_label_novos_pedidos.set('Nenhum pedido encontrado - última atualização em ' + data_atualizacao)
    else:
        var_label_novos_pedidos.set('Atualizando')

        while linha <= (qtde_pedidos_periodo - 1):
            id_pedido = str(pedidos.iloc[linha,0])
            codigo_pedido = str(pedidos.iloc[linha,1])
            marketplace = str(pedidos.iloc[linha,2])
            status_pedido = pedidos.iloc[linha,7]
            url_pedido = "http://api.ideris.com.br/Pedido/" + id_pedido
            response_pedido = requests.request("GET", url_pedido, headers=headers_pedidos)
            response_pedido = json.loads(response_pedido.content)
            pedido = pd.DataFrame.from_dict(json_normalize(response_pedido), orient='columns')
            pedido = pedido.iloc[0, 0]
            pedido = pd.DataFrame(pedido)
            data_pedido = str(pedido.iloc[0, 1])
            return divisao_ddmmaa(data_pedido)
            valor_total_com_frete = str(pedido.iloc[0,3])
            valor_total_com_frete = valor_total_com_frete.replace('.',',')
            valor_total_com_frete = "R$ " +valor_total_com_frete
            valor_total = str(pedido.iloc[0,5])
            valor_total = valor_total.replace('.',',')
            valor_total = "R$ " + valor_total
            tarifa_envio = str(pedido.iloc[0,6])
            tarifa_envio = tarifa_envio.replace('.',',')
            tarifa_envio = "R$ " + tarifa_envio
            tarifa_venda_marketplace = pedido.iloc[0,7]
            cod_entrega = pedido.iloc[0,23]
            tipo_entrega = pedido.iloc[0,16]
            cod_rastreio = pedido.iloc[0,25]
            cliente = pedido.iloc[0,26]
            cpf_cnpj = pedido.iloc[0,31]
            telefone = pedido.iloc[0,33]
            email = pedido.iloc[0,29]
            endereco = pedido.iloc[0,34]
            cep = pedido.iloc[0,37]
            bairro = pedido.iloc[0,38]
            cidade = pedido.iloc[0,39]
            estado = pedido.iloc[0,0]
            observacao = pedido.iloc[0,42]
            responsavel_receber = pedido.iloc[0,43]
            data_criacao = pedido.iloc[0,48]
            itens = pedido.iloc[0,53]
            itens = pd.DataFrame(itens)
            titulo_produto = itens.iloc[0,0]
            sku = itens.iloc[0,1]
            qtde = itens.iloc[0,4]
            preco_unitario = itens.iloc[0,5]
            pagamento = pedido.iloc[0,54]
            pagamento = pd.DataFrame(pagamento)
            cod_pagamento = pagamento.iloc[0,0]
            aprovacao_pagamento = pagamento.iloc[0,1]
            ano_pag = aprovacao_pagamento[0:4]
            mes_pag = aprovacao_pagamento[5:7]
            dia_pag = aprovacao_pagamento[8:10]
            aprovacao_pagamento = dia_pag + "/" + mes_pag + "/" + ano_pag
            status_pagamento = pagamento.iloc[0,2]
            forma_pagamento = pagamento.iloc[0,3]
            parcelas = pagamento.iloc[0,4]
            novos_pedidos0.loc[linha] = [id_pedido, codigo_pedido, marketplace, status_pedido, data_pedido,
                                         valor_total_com_frete, valor_total, tarifa_envio, tarifa_venda_marketplace,
                                         cod_entrega, tipo_entrega, cod_rastreio, cliente, cpf_cnpj, telefone, email,
                                         endereco, cep, bairro, cidade, estado, observacao, responsavel_receber,
                                         data_criacao, titulo_produto, sku, qtde, preco_unitario, cod_pagamento,
                                         aprovacao_pagamento, status_pagamento, forma_pagamento, parcelas]

            if str(codigo_pedido) not in df_cod_pedido:

                novos_pedidos = pd.concat([novos_pedidos0])
                tree_acompanhamento_pedidos = novos_pedidos[
                    ['cod_pedido', 'aprovacao_pagamento', 'sku', 'titulo_produto', 'qtde', 'valor_total',
                     'tarifa_envio', 'marketplace']]
                linhas_pedidos = tree_acompanhamento_pedidos.to_numpy().tolist()

                df_cod_pedido.append(codigo_pedido)

            consulta_pedido = "SELECT ID_PEDIDO, COD_PEDIDO FROM ZMARKETPLACE_PEDIDOS"
            consulta_pedido = pd.read_sql(consulta_pedido, conn)
            consulta_pedido = consulta_pedido['ID_PEDIDO'].tolist()

            if codigo_pedido not in consulta_pedido:
                aviso_novo_pedido = 1
                datetime_novo_pedido = data_atualizacao1.strftime("%d/%m/%Y %H:%M:%S")
###inserir tbm data e hora do pedido###
                insert_pedido = "INSERT INTO ZMARKETPLACE_PEDIDOS (ID_PEDIDO,COD_PEDIDO,MARKETPLACE) VALUES ('" + id_pedido + "','" + codigo_pedido + "','" + marketplace + "')"
                cursor.execute(insert_pedido)
                conn.commit()

            if aviso_novo_pedido == 1 and (datetime.today("%d/%m/%Y %H:%M:%S")  >= datetime_novo_pedido + timedelta(hour=+1)):
                aviso_novo_pedido = 0
                atendimentos_mktplaces_query = "SELECT SUA.UA_NUM AS Atendimento, SUA.UA_EMISSAO AS Data_Atendimento, SUA.UA_DESPESA AS Frete,(SUA.UA_ENTRADA - SUA.UA_DESPESA) AS Valor_Venda, SUA.UA_CLIENTE AS Cod_Cliente, SA1.A1_NOME AS Cliente,TRIM(SA1.A1_CGC) AS CPF_CNPJ,SA1.A1_EST AS Estado,TRIM(SA1.A1_MUN) AS Municipio, SUB.UB_PRODUTO AS Cod_Produto, SUB.UB_ZDESC AS Produto,ZB2.ZB2_DESFAM AS Categoria, SUB.UB_OPER AS Operacao, SUA.UA_VEND AS Cod_Vendedor, SA4.A4_NOME AS Transportadora,SE1.E1_NOMCLI AS Marketplace FROM SUA010 SUA  LEFT JOIN SL1010 SL1 ON SL1.D_E_L_E_T_ = '' AND SL1.L1_FILIAL = SUA.UA_FILIAL AND SL1.L1_NUMATEN = SUA.UA_NUM LEFT JOIN SA1010 SA1 ON SA1.D_E_L_E_T_ = '' AND SA1.A1_COD = SUA.UA_CLIENTE LEFT JOIN SL4010 SL4 ON SL4.D_E_L_E_T_ = '' AND SL4.L4_DOC = SL1.L1_DOC  LEFT JOIN SF2010 SF2 ON SF2.D_E_L_E_T_ = '' AND SF2.F2_DOC = SL1.L1_DOC  LEFT JOIN SUB010 SUB ON SUB.D_E_L_E_T_ = '' AND SUB.UB_NUM = SUA.UA_NUM LEFT JOIN SL2010 SL2 ON SL2.D_E_L_E_T_ = '' AND SL2.L2_DOC = SL1.L1_DOC  LEFT JOIN SE1010 SE1 ON SE1.D_E_L_E_T_ = '' AND SE1.E1_NUM = SL1.L1_DOC  LEFT JOIN SAE010 SAE ON SAE.D_E_L_E_T_ = '' AND SAE.AE_COD = SE1.E1_CLIENTE  LEFT JOIN SA4010 SA4 ON SA4.D_E_L_E_T_ = '' AND SA4.A4_COD = SUA.UA_TRANSP LEFT JOIN SB1010 SB1 ON SB1.D_E_L_E_T_ = '' AND SB1.B1_COD = SUB.UB_PRODUTO LEFT JOIN SB5010 SB5 ON SB5.D_E_L_E_T_ = '' AND SB5.B5_COD = SB1.B1_COD LEFT JOIN ZB2010 ZB2 ON ZB2.D_E_L_E_T_ = '' AND ZB2.ZB2_CODFAM = SB1.B1_ZCODFAM LEFT JOIN ZMARKETPLACE MKT ON MKT.NF = SL2.L2_DOC WHERE 1=1 AND SUA.D_E_L_E_T_ = '' AND SUA.UA_VEND = '000099' AND SUA.UA_EMISSAO >= '" + (
                    data_atual3) + "' AND SA1.A1_CGC ='" + cpf_cnpj + "' GROUP BY SUA.UA_FILIAL, SUA.UA_NUM,SUA.UA_EMISSAO,SUA.UA_CLIENTE,SA1.A1_NOME,SA1.A1_CGC,SA1.A1_EST, SA1.A1_MUN,SUB.UB_PRODUTO,SB5.B5_CODFAM,SUB.UB_ZDESC, ZB2.ZB2_CODFAM, ZB2.ZB2_DESFAM,SUB.UB_OPER,SUA.UA_VEND,SA4.A4_NOME,SUA.UA_TRANSP,SE1.E1_NOMCLI, SUA.UA_DESPESA, SUA.UA_ENTRADA"
                atendimentos_mktplaces_in = pd.read_sql(atendimentos_mktplaces_query, conn)

                qtde_linhas_atendimentos_mktplaces = atendimentos_mktplaces_in['Atendimento'].count()
                linha_atendimentos_mktplaces = 0
                atendimentos_mktplaces = pd.DataFrame()
                atendimentos_mktplaces1 = pd.DataFrame(
                    columns=['Atendimento', 'Data_Atendimento', 'Cliente', 'Produto', 'Valor_Venda', 'Frete'])

                while linha_atendimentos_mktplaces <= (qtde_linhas_atendimentos_mktplaces - 1):
                    atendimento_atd = atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces, 0]
                    data_atd = atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces, 1]
                    ano_atd = data_atd[0:4]
                    mes_atd = data_atd[4:6]
                    dia_atd = data_atd[6:8]
                    data_atd = dia_atd + "/" + mes_atd + "/" + ano_atd
                    cliente_atd = str(atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces, 5]).replace('.',',').title()
                    produto_atd = str(atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces, 10]).replace('.',',').title()
                    valor_venda_atd = round((atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces, 3]), 2)
                    valor_venda_atd = "R$ " + str(valor_venda_atd)
                    frete_atd = round((atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces, 2]), 2)
                    frete_atd = "R$ " + str(frete_atd)
                    atendimentos_mktplaces1.loc[linha_atendimentos_mktplaces] = [atendimento_atd, data_atd, cliente_atd,
                                                                                 produto_atd, valor_venda_atd, frete_atd
                    if str(atendimento_atd) not in df_cod_atendimento:
                        atendimentos_mktplaces = pd.concat([atendimentos_mktplaces1])
                        linhas_atendimentos = atendimentos_mktplaces.to_numpy().tolist()
                        df_cod_atendimento.append(atendimento_atd)

                    linha_atendimentos_mktplaces = linha_atendimentos_mktplaces + 1
                linha = linha + 1
                ultimo_caractere = str(linha)[-1]
                if ultimo_caracter == 9:
                    sleep(60)

        for row in linhas_pedidos:
            acompanhamento_pedidos.insert('', 'end', values=row)

        for row in linhas_atendimentos:
            acompanhamento_atendimentos.insert('', 'end', values=row)
        var_label_novos_pedidos.set('Pedidos atualizados - última atualização em ' + data_atualizacao)
    t = threading.Timer(300.0, atualiza_pedidos)
    t.start()


janela = tk.Tk()
canvas = tk.Canvas(janela)
janela.title("Marketplace")
janela.geometry('700x650+300+60')
janela.resizable(width=0, height=0)
janela.iconphoto(False, tk.PhotoImage(
    file='//192.168.1.16/02 - Público/09 - Marketing/Marketplaces/Inserções Manuais/Imagens/icone.png'))

abas = ttk.Notebook(janela)
aba1 = Frame(abas)
aba2 = Frame(abas)
aba3 = Frame(abas)
abas.add(aba1, text='Vendas')
abas.add(aba2, text='Rastreio')
abas.add(aba3, text='Ocorrências')

abas.place(height=650, width=700, x=0, y=0)

acompanhamento_pedidos = ttk.Treeview(aba1, selectmode="browse", column=(
'pedido', 'data_pedido', 'cod_produto', 'produto', 'quantidade', 'valor', 'frete', 'marketplace'), show='headings')
acompanhamento_pedidos.column('pedido', width=80, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#1', text='Pedido')
acompanhamento_pedidos.column('data_pedido', width=80, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#2', text='Data Pedido')
acompanhamento_pedidos.column('cod_produto', width=60, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#3', text=' Cód.Prod')
acompanhamento_pedidos.column('produto', width=170, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#4', text='Produto')
acompanhamento_pedidos.column('quantidade', width=40, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#5', text='Qtde')
acompanhamento_pedidos.column('valor', width=80, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#6', text='Valor')
acompanhamento_pedidos.column('frete', width=80, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#7', text='Frete')
acompanhamento_pedidos.column('marketplace', width=100, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#8', text='Marketplace')
acompanhamento_pedidos.place(height=120, width=700, x=0, y=15)

acompanhamento_atendimentos = ttk.Treeview(aba1, selectmode="browse", column=(
'atendimento', 'dt_atendimento', 'cliente', 'produto', 'valor', 'frete'), show='headings')
acompanhamento_atendimentos.column('atendimento', width=80, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#1', text='Atendimento')
acompanhamento_atendimentos.column('dt_atendimento', width=90, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#2', text='Data Atend.')
acompanhamento_atendimentos.column('cliente', width=180, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#3', text='Cliente')
acompanhamento_atendimentos.column('produto', width=180, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#4', text='Produto')
acompanhamento_atendimentos.column('valor', width=80, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#5', text='Valor')
acompanhamento_atendimentos.column('frete', width=80, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#6', text='Frete')
acompanhamento_atendimentos.place(height=120, width=700, x=0, y=155)

acompanhamento_nfs = ttk.Treeview(aba1, selectmode="browse",
                                  column=('Cliente', 'NF', 'Data Emissão', 'Chave NF-e', 'Valor NF'), show='headings')
acompanhamento_nfs.column('Cliente', width=120, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#1', text='Cliente')
acompanhamento_nfs.column('NF', width=70, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#2', text='NF')
acompanhamento_nfs.column('Data Emissão', width=100, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#3', text='Data Emissão')
acompanhamento_nfs.column('Chave NF-e', width=300, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#4', text='Chave NF-e')
acompanhamento_nfs.column('Valor NF', width=100, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#5', text='Valor NF')
acompanhamento_nfs.place(height=120, width=700, x=0, y=295)

acompanhamento_entregas = ttk.Treeview(aba1, selectmode="browse",
                                       column=('nf', 'fase_logi', 'transportadora', 'status_entrega', 'data_status'),
                                       show='headings')
acompanhamento_entregas.column('nf', width=120, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#1', text='NF')
acompanhamento_entregas.column('fase_logi', width=70, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#2', text='Fase Logi')
acompanhamento_entregas.column('transportadora', width=100, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#3', text='Transp')
acompanhamento_entregas.column('status_entrega', width=300, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#4', text='Status')
acompanhamento_entregas.column('data_status', width=100, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#5', text='Data Status')
acompanhamento_entregas.place(height=120, width=700, x=0, y=435)

var_label_novos_pedidos = StringVar()
label_novos_pedidos = tk.Label(aba1, textvariable=var_label_novos_pedidos).place(x=8, y=600)

label_nf = tk.Label(aba2, text="NF", fg="black").place(x=8, y=10)
entrada_nf = tk.StringVar()
ent_nf = tk.Entry(aba2, fg="black", bg="#eff0f1", width=20, textvariable=entrada_nf).place(x=10, y=30)

label_rastreio = tk.Label(aba2, text="Rastreio", fg="black").place(x=8, y=50)
entrada_rastreio = tk.StringVar()
ent_rastreio = tk.Entry(aba2, fg="black", bg="#eff0f1", width=30, textvariable=entrada_rastreio).place(x=10, y=70)

label_cod_mktplace = tk.Label(aba2, text="Código Marketplace", fg="black").place(x=8, y=90)
entrada_cod_mktplace = tk.StringVar()
ent_cod_mktplace = tk.Entry(aba2, fg="black", bg="#eff0f1", width=30, textvariable=entrada_cod_mktplace).place(x=10,
                                                                                                               y=110)

botao_ok = tk.Button(aba2, text='ok', width=10).place(x=15, y=140)
botao_limpar = tk.Button(aba2, text='limpar', width=10).place(x=115, y=140)


def inserir_ocorrencia():
    entrada_atendimento_ocor2 = str(entrada_atendimento_ocor.get())
    entrada_tipo_ocor2 = str(entrada_tipo_ocor.get())
    entrada_descricao_ocor2 = str(entrada_descricao_ocor.get('1.0', 'end'))

    ok_cancelar = messagebox.askokcancel("Atenção", "Você deseja mesmo inserir as informações?")

    query_inserir_ocorrencia = "INSERT INTO ZMARKETPLACE_OCORRENCIAS (ATENDIMENTO, TIPO_OCORRENCIA, DESCRICAO_OCORRENCIA) VALUES('" + entrada_atendimento_ocor2 + "','" + entrada_tipo_ocor2 + "','" + entrada_descricao_ocor2 + "')"
    cursor.execute(query_inserir_ocorrencia)
    conn.commit()

    entrada_atendimento_ocor.set('')
    entrada_tipo_ocor.set('')
    entrada_descricao_ocor.set('')


label_atendimento_ocor = tk.Label(aba3, text="Atendimento", fg="black").place(x=18, y=10)
entrada_atendimento_ocor = tk.StringVar()
ent_atendimento_ocor = tk.Entry(aba3, fg="black", bg="#eff0f1", width=20, textvariable=entrada_atendimento_ocor).place(
    x=18, y=30)

label_tipo_ocor = tk.Label(aba3, text="Tipo da Ocorrência", fg="black").place(x=188, y=10)
entrada_tipo_ocor = tk.StringVar()
ent_tipo_ocor = ttk.Combobox(aba3,
                             values=['Mau estado - Sem NF', 'Mau estado', 'Faltando peça', 'Modelo errado enviado',
                                     'Medidas erradas', 'Danificado pela transportadora', 'Erro de variação',
                                     'Comprou errado', 'Arrependimento'], textvariable=entrada_tipo_ocor,
                             width=25).place(x=188, y=30)

label_descricao_ocor = tk.Label(aba3, text="Descrição da ocorrência", fg="black").place(x=18, y=50)
entrada_descricao_ocor = tk.StringVar()
ent_descricao_ocor = tk.Entry(aba3, fg="black", bg="#eff0f1", width=80).place(x=18, y=70, height=150)

botao_ok_ocor = tk.Button(aba3, text='ok', width=10, command=inserir_ocorrencia).place(x=15, y=300)
botao_limpar_ocor = tk.Button(aba3, text='limpar', width=10).place(x=115, y=300)

t = threading.Timer(1.0, atualiza_pedidos)
t.start()

janela.mainloop()
