from operator import truediv
from statistics import median
from attr import attrs
from bs4 import BeautifulSoup
import requests
from bs4 import BeautifulSoup
import numpy as np
import pandas as pd

from selenium import webdriver
import selenium
from selenium.webdriver.chrome import options
from selenium.webdriver.chrome.options import Options
from time import sleep
from pytrends.request import TrendReq
from collections import Counter
import statistics

'''
pytrend = TrendReq()
pytrend.build_payload(kw_list=['Liquidificador baixa rotação'])
df = pytrend.interest_over_time()
print(df.tail())
'''

lista_produtos = pd.read_excel('//192.168.1.16/02 - Público/09 - Marketing/Marketplaces/Scrap_MeLi/Itens_pesquisar/itens_pesquisar.xlsx')
qtde_produtos = lista_produtos['Produtos'].count()
linha_produtos = 0

produtos_resultado = pd.DataFrame(columns = (['Título','Produto','Valor à Vista','qtde_vendida','Stk disponível','Tipo Frete','seller','Vendas<60','Classe Seller','link']))
planilha_produtos_resultado = pd.DataFrame()

termos_frequentes = pd.DataFrame(columns=['Produto','Termos_frequentes'])
planilha_termos_frequentes = pd.DataFrame()
linha = 0
while linha_produtos < qtde_produtos:
    produto1 = lista_produtos.iloc[linha_produtos,0]
    pagina_response = requests.get('https://lista.mercadolivre.com.br/'+produto1)
    pagina = BeautifulSoup(pagina_response.text,'html.parser')
    produtos = pagina.findAll('li',attrs={'class':'ui-search-layout__item'})

    for produto in produtos:
        titulo = produto.find('h2',attrs={'class':'ui-search-item__title'})
        
        link = produto.find('a',attrs={'class':'ui-search-link'})
        link1 = produto.find('a',attrs={'class':'ui-search-link'})['href']
        link1 = requests.get(link1)
        link1 = BeautifulSoup(link1.text,'html.parser')
        stk_disponivel = link1.find('span',attrs={'class':'ui-pdp-buybox__quantity__available'})

        if stk_disponivel == None:
            stk_disponivel = 'Último disponível'
        else:
            stk_disponivel = stk_disponivel.text

        stk_disponivel = str(stk_disponivel).replace('disponíveis','').replace('(','').replace(')','')
        valor_vista = produto.find('span',attrs={'class':'price-tag-fraction'})
        qtde_vendida = link1.find('div',attrs={'class':'ui-pdp-header'})
        qtde_vendida = qtde_vendida.find('div',attrs={'class':'ui-pdp-header__subtitle'})
        qtde_vendida = qtde_vendida.find('span',attrs={'class':'ui-pdp-subtitle'})
        qtde_vendida = qtde_vendida.text
        qtde_vendida = qtde_vendida.replace('Novo','').replace('vendidos','').replace('|','').lstrip().rstrip()

        tipo_frete = link1.find('div',attrs={'class':'ui-pdp-media__body'})
        tipo_frete = tipo_frete.text

        if 'Frete' in tipo_frete:
            tipo_frete = 'Frete grátis'

        if 'Chegará grátis' in tipo_frete:
            tipo_frete = 'Frete grátis'
    
        if 'Entrega a combinar' in tipo_frete:
            tipo_frete = 'Entrega a combinar'
        
        if 'Envio para todo' in tipo_frete:
            tipo_frete = 'Entrega a combinar'    

        seller1 = link1.find('a',attrs={'class':'ui-pdp-media__action ui-box-component__action'})
        vendedor_loja = link1.find('h2',attrs={'class':'ui-box-component__title'})
        vendas_60_dias = link1.find('strong',attrs={'class':'ui-pdp-seller__sales-description'})

        if vendas_60_dias == None:
            vendas_60_dias = 'Sem informação'
        else:
            vendas_60_dias = vendas_60_dias.text

        classe_seller = link1.find('p',attrs={'class':'ui-seller-info__status-info__title ui-pdp-seller__status-title'})

        print(titulo.text,produto1,valor_vista.text)

        if classe_seller == None:
            classe_seller = 'Sem informação'
        else:
            classe_seller = classe_seller.text

        if seller1 == None:
            seller = 'Sem informação'
        else:
            seller1 = requests.get(seller1['href'])
            seller1 = BeautifulSoup(seller1.text,'html.parser')

            if vendedor_loja.text == 'Informações da loja':
                seller = seller1.find('h3',attrs={'class':'brand'})
                seller = seller.text
            else:
                seller = seller1.find('h3',attrs={'class':'store-info__name'})
                seller = seller.text

        produtos_resultado.loc[linha] = ([titulo.text,produto1,valor_vista.text,qtde_vendida,stk_disponivel,tipo_frete,seller,vendas_60_dias,classe_seller,link['href']])
        linha = linha + 1

    produtos_resultado.dropna(subset = 'Valor à Vista',inplace=True)
    produtos_resultado['Valor à Vista'] = produtos_resultado['Valor à Vista'].str.replace('.','')
    produtos_resultado['Valor à Vista'] = produtos_resultado['Valor à Vista'].astype(int)
    mediana_produto = produtos_resultado.query("Produto == '"+produto1+"'")
    mediana_produto = mediana_produto['Valor à Vista'].astype(float)
    mediana_produto = mediana_produto.sort_values(ascending=True)
    print(mediana_produto)
    mediana_produto = statistics.median(mediana_produto)
    preco_min_considerar = mediana_produto/2
    
    produtos_resultado = produtos_resultado.query("Valor à Vista >='"+str(preco_min_considerar)+"'")

    produtos_resultado_termos = produtos_resultado.query("Produto == '"+produto1+"'")

    termos_anuncios = produtos_resultado['Título'].to_list()
    lista_termos = []

    for termo_anuncio in termos_anuncios:
        lista_termo = str(termo_anuncio).split(' ')
        lista_termos = lista_termos + lista_termo

    termos_comuns = Counter(lista_termos).most_common(10)
    termos_comuns = str(termos_comuns).replace('[','').replace(']','')
    termos_frequentes.loc[linha_produtos]=([produto1,termos_comuns])
    
    planilha_termos_frequentes = termos_frequentes

    #produtos_resultado = produtos_resultado[0:0]
    linha_produtos = linha_produtos + 1 
print(produtos_resultado)
print(termos_anuncios)   

produtos_resultado.sort_values(by=['Valor à Vista','qtde_vendida'], ignore_index=True, ascending= True,inplace=True)
produtos_resultado.to_excel('//192.168.1.16/02 - Público/09 - Marketing/Marketplaces/Scrap_MeLi/mon_meli.xlsx')
termos_frequentes.to_excel('//192.168.1.16/02 - Público/09 - Marketing/Marketplaces/Scrap_MeLi/mon_termos_meli.xlsx')
