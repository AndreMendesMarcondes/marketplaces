from os import replace
import tkinter
from pandas.core.reshape.concat import concat
import requests
import pandas as pd
import json
import pyodbc
import tkinter as tk
from tkinter import *
from tkinter import ttk 
from tkinter import WORD
from tkinter import messagebox
from tkinter import scrolledtext
from pandas import json_normalize
from datetime import date
from datetime import datetime, timedelta
import threading
import time

server = '192.168.1.15' 
database = 'PROTHEUS_ZANOTTI_PRODUCAO' 
username = 'totvs' 
password = 'totvsip' 
conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password)
cursor = conn.cursor()

df_cod_pedido = []
df_cod_atendimento=[]
df_nf_nfs=[]
verifica_atendimento = 0
verifica_pedido = 0

def atualiza_pedidos():
    url_ideris = 'http://api.ideris.com.br/Login'
    payload_ideris = json.dumps({"login_token":"27efe191bb0f077c38fae0fe3970863c9ecee6017c60a79f430e58a598fa52e578f43a64b7fbdc230d5c599207607b3f"})
    headers = {"Content-Type": "application/json"}
    response_ideris = requests.request("POST", url_ideris, headers=headers, data=payload_ideris)
    response_ideris = str(response_ideris.text)

    select_ultimo_pedido = "SELECT MAX(DATA_PEDIDO) FROM ZMARKETPLACE_PEDIDOS"
    data_ultimo_pedido = pd.read_sql(select_ultimo_pedido,conn)
    data_ultimo_pedido1 = str(data_ultimo_pedido.iloc[0,0])
    ano_ultimo_pedido = data_ultimo_pedido1[0:4]
    mes_ultimo_pedido = data_ultimo_pedido1[4:6]
    dia_ultimo_pedido = data_ultimo_pedido1[6:8]
    data_ultimo_pedido = ano_ultimo_pedido +"-"+mes_ultimo_pedido+"-"+dia_ultimo_pedido

    select_data_ultimas_nfs = "SELECT TOP 5 SL1.L1_DOC AS doc, SL1.L1_EMISNF AS data FROM SL1010 SL1 WHERE SL1.L1_VEND = '000099' AND SL1.L1_DOC <> '' order by SL1.L1_EMISNF DESC"
    select_data_ultimas_nfs= pd.read_sql(select_data_ultimas_nfs,conn)
    min_data_ultimas_nfs = select_data_ultimas_nfs['data'].min()

    data_atual = date.today()
    data_atual3 = data_atual.strftime("%Y%m%d")
    data_atual2=(date.today())
    data_atual2 = data_atual2.strftime("%Y-%m-%d")
        
    data_atualizacao1 = datetime.today()
    data_atualizacao = data_atualizacao1.strftime("%d/%m/%Y %H:%M:%S")
    response_ideris = response_ideris.replace('"',"",2)

    url_pedidos = "http://api.ideris.com.br/ListaPedido?dataInicial="+data_ultimo_pedido+"&dataFinal="+data_atual2
    headers_pedidos = {
    "Authorization": response_ideris,
    "Content-Type": "application/json"
    }
    response_pedidos = requests.request("GET", url_pedidos, headers=headers_pedidos)
    response_pedidos = json.loads(response_pedidos.content)
    pedidos = pd.DataFrame.from_dict(json_normalize(response_pedidos), orient='columns')
    qtde_pedidos_periodo = pedidos.iloc[0,4]
    pedidos = pedidos.iloc[0,0]
    pedidos = pd.DataFrame(pedidos)
    novos_pedidos = pd.DataFrame()
    novos_pedidos0 = pd.DataFrame(columns=['id_pedido','cod_pedido','marketplace','status_pedido','data_pedido','valor_total_com_frete','valor_total','tarifa_envio','tarifa_venda_marketplace','cod_entrega','tipo_entrega','cod_rastreio','cliente','cpf_cnpj','telefone','email','endereco','cep','bairro','cidade','estado','observacao','responsavel_receber','data_criacao','titulo_produto','sku','qtde','preco_unitario','cod_pagamento','aprovacao_pagamento','status_pagamento','forma_pagamento','parcelas'])
    linha = 0
    
    if pedidos.empty:
        var_label_novos_pedidos.set('Nenhum pedido encontrado - última atualização em '+data_atualizacao)
    
    else:
        var_label_novos_pedidos.set('Atualizando')
        verifica_pedido = 0
        while linha <= (qtde_pedidos_periodo-1):
            id_pedido = str(pedidos.iloc[linha,0]) 
            codigo_pedido = pedidos.iloc[linha,1]
            marketplace = pedidos.iloc[linha,2]
            status_pedido = pedidos.iloc[linha,7]
            url_pedido = "http://api.ideris.com.br/Pedido/"+id_pedido
            response_pedido = requests.request("GET", url_pedido, headers=headers_pedidos)
            response_pedido = json.loads(response_pedido.content)
            pedido = pd.DataFrame.from_dict(json_normalize(response_pedido), orient='columns')          
            pedido = pedido.iloc[0,0]
            pedido = pd.DataFrame(pedido)
            data_pedido = str(pedido.iloc[0,1])
            ano = data_pedido[0:4]
            mes = data_pedido[5:7]
            dia = data_pedido[8:10]
            data_pedido= ano+mes+dia
            valor_total_com_frete = str(pedido.iloc[0,3])
            valor_total_com_frete = valor_total_com_frete.replace('.',',')
            valor_total_com_frete = "R$ "+valor_total_com_frete
            valor_total = str(pedido.iloc[0,5])
            valor_total = valor_total.replace('.',',')
            valor_total = "R$ "+ valor_total
            tarifa_envio = str(pedido.iloc[0,6])
            tarifa_envio = tarifa_envio.replace('.',',')
            tarifa_envio = "R$ "+ tarifa_envio
            tarifa_venda_marketplace = pedido.iloc[0,7]
            cod_entrega = pedido.iloc[0,23]
            tipo_entrega = pedido.iloc[0,16]
            cod_rastreio = pedido.iloc[0,25]
            cliente = pedido.iloc[0,26]
            cpf_cnpj = pedido.iloc[0,31]
            telefone = pedido.iloc[0,33]
            email = pedido.iloc[0,29]
            endereco = pedido.iloc[0,34]
            cep = pedido.iloc[0,37]
            bairro = pedido.iloc[0,38]
            cidade = pedido.iloc[0,39]
            estado = pedido.iloc[0,40]
            observacao = pedido.iloc[0,42]
            responsavel_receber = pedido.iloc[0,43]
            data_criacao = pedido.iloc[0,48]
            itens = pedido.iloc[0,53]
            itens = pd.DataFrame(itens)
            titulo_produto = itens.iloc[0,0]
            sku = itens.iloc[0,1]
            qtde = itens.iloc[0,4]
            preco_unitario = itens.iloc[0,5]
            pagamento = pedido.iloc[0,54]
            pagamento = pd.DataFrame(pagamento)
            cod_pagamento = pagamento.iloc[0,0]
            aprovacao_pagamento = pagamento.iloc[0,1]
            ano_pag = aprovacao_pagamento[0:4]
            mes_pag = aprovacao_pagamento[5:7]
            dia_pag = aprovacao_pagamento[8:10]
            aprovacao_pagamento = dia_pag+"/"+mes_pag+"/"+ano_pag
            status_pagamento = pagamento.iloc[0,2]
            forma_pagamento = pagamento.iloc[0,3]
            parcelas = pagamento.iloc[0,4]
            novos_pedidos0.loc[linha] = [id_pedido,codigo_pedido,marketplace,status_pedido,data_pedido,valor_total_com_frete,valor_total,tarifa_envio,tarifa_venda_marketplace,cod_entrega,tipo_entrega,cod_rastreio,cliente,cpf_cnpj,telefone,email,endereco,cep,bairro,cidade,estado,observacao,responsavel_receber,data_criacao,titulo_produto,sku,qtde,preco_unitario,cod_pagamento,aprovacao_pagamento,status_pagamento,forma_pagamento,parcelas]      
            
            if str(codigo_pedido) not in df_cod_pedido:
                verifica_pedido = verifica_pedido + 1
                novos_pedidos = pd.concat([novos_pedidos0])
                tree_acompanhamento_pedidos = novos_pedidos[['cod_pedido','aprovacao_pagamento','sku','titulo_produto','qtde', 'valor_total', 'tarifa_envio','marketplace']]
                linhas_pedidos = tree_acompanhamento_pedidos.to_numpy().tolist() 
                df_cod_pedido.append(codigo_pedido)           
            consulta_pedido = "SELECT ID_PEDIDO, COD_PEDIDO, DATA_PEDIDO FROM ZMARKETPLACE_PEDIDOS"
            consulta_pedido = pd.read_sql(consulta_pedido,conn)
            consulta_pedido = consulta_pedido['ID_PEDIDO'].tolist()
        
            if id_pedido not in consulta_pedido:
                insert_pedido = "INSERT INTO ZMARKETPLACE_PEDIDOS \
                                (\
                                 ID_PEDIDO,\
                                COD_PEDIDO,\
                                MARKETPLACE,\
                                DATA_PEDIDO\
                                ) VALUES\
                                (\
                                '"+id_pedido+"',\
                                '"+codigo_pedido+"',\
                                '"+marketplace+"',\
                                '"+data_pedido+"'\
                                    )"
                cursor.execute(insert_pedido)
                conn.commit()
            
            atendimentos_mktplaces_query = "SELECT \
                                            SUA.UA_NUM AS Atendimento,\
                                            SUA.UA_EMISSAO AS Data_Atendimento,\
                                            SUA.UA_DESPESA AS Frete,\
                                            (SUA.UA_ENTRADA - SUA.UA_DESPESA) AS Valor_Venda,\
                                            SUA.UA_CLIENTE AS Cod_Cliente,\
                                            SA1.A1_NOME AS Cliente,\
                                            TRIM(SA1.A1_CGC) AS CPF_CNPJ,\
                                            SA1.A1_EST AS Estado,\
                                            TRIM(SA1.A1_MUN) AS Municipio,\
                                            SUB.UB_PRODUTO AS Cod_Produto,\
                                            SUB.UB_ZDESC AS Produto,\
                                            ZB2.ZB2_DESFAM AS Categoria,\
                                            SUB.UB_OPER AS Operacao,\
                                            SUA.UA_VEND AS Cod_Vendedor,\
                                            SA4.A4_NOME AS Transportadora,\
                                            SE1.E1_NOMCLI AS Marketplace\
                                            FROM SUA010 SUA\
                                            LEFT JOIN SL1010 SL1 ON SL1.D_E_L_E_T_ = '' AND SL1.L1_FILIAL = SUA.UA_FILIAL AND SL1.L1_NUMATEN = SUA.UA_NUM\
                                            LEFT JOIN SA1010 SA1 ON SA1.D_E_L_E_T_ = '' AND SA1.A1_COD = SUA.UA_CLIENTE \
                                            LEFT JOIN SL4010 SL4 ON SL4.D_E_L_E_T_ = '' AND SL4.L4_DOC = SL1.L1_DOC \
                                            LEFT JOIN SF2010 SF2 ON SF2.D_E_L_E_T_ = '' AND SF2.F2_DOC = SL1.L1_DOC  \
                                            LEFT JOIN SUB010 SUB ON SUB.D_E_L_E_T_ = '' AND SUB.UB_NUM = SUA.UA_NUM \
                                            LEFT JOIN SL2010 SL2 ON SL2.D_E_L_E_T_ = '' AND SL2.L2_DOC = SL1.L1_DOC  \
                                            LEFT JOIN SE1010 SE1 ON SE1.D_E_L_E_T_ = '' AND SE1.E1_NUM = SL1.L1_DOC \
                                            LEFT JOIN SAE010 SAE ON SAE.D_E_L_E_T_ = '' AND SAE.AE_COD = SE1.E1_CLIENTE \
                                            LEFT JOIN SA4010 SA4 ON SA4.D_E_L_E_T_ = '' AND SA4.A4_COD = SUA.UA_TRANSP \
                                            LEFT JOIN SB1010 SB1 ON SB1.D_E_L_E_T_ = '' AND SB1.B1_COD = SUB.UB_PRODUTO \
                                            LEFT JOIN SB5010 SB5 ON SB5.D_E_L_E_T_ = '' AND SB5.B5_COD = SB1.B1_COD \
                                            LEFT JOIN ZB2010 ZB2 ON ZB2.D_E_L_E_T_ = '' AND ZB2.ZB2_CODFAM = SB1.B1_ZCODFAM \
                                            LEFT JOIN ZMARKETPLACE MKT ON MKT.NF = SL2.L2_DOC \
                                            WHERE 1=1 AND SUA.D_E_L_E_T_ = '' AND\
                                            SUA.UA_VEND = '000099' AND\
                                            SUA.UA_EMISSAO <= '"+data_atual3+"'AND\
                                            SUA.UA_EMISSAO >='"+data_pedido+"'  AND\
                                            SA1.A1_CGC ='"+cpf_cnpj+"' \
                                            GROUP BY SUA.UA_FILIAL, SUA.UA_NUM,SUA.UA_EMISSAO,SUA.UA_CLIENTE,SA1.A1_NOME,SA1.A1_CGC,SA1.A1_EST, SA1.A1_MUN,SUB.UB_PRODUTO,SB5.B5_CODFAM,SUB.UB_ZDESC, ZB2.ZB2_CODFAM, ZB2.ZB2_DESFAM,SUB.UB_OPER,SUA.UA_VEND,SA4.A4_NOME,SUA.UA_TRANSP,SE1.E1_NOMCLI, SUA.UA_DESPESA, SUA.UA_ENTRADA"
            
            atendimentos_mktplaces_in = pd.read_sql(atendimentos_mktplaces_query,conn)
            
            qtde_linhas_atendimentos_mktplaces = atendimentos_mktplaces_in['Atendimento'].count()
            
            linha_atendimentos_mktplaces = 0
            atendimentos_mktplaces = pd.DataFrame()
            atendimentos_mktplaces1=pd.DataFrame(columns=['Atendimento','Data_Atendimento','Cliente','Produto','Valor_Venda','Frete'])
            verifica_atendimento = 0 

            while linha_atendimentos_mktplaces <= (qtde_linhas_atendimentos_mktplaces-1):
                atendimento_atd = atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces,0]
                data_atd = atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces,1]
                ano_atd = data_atd[0:4]
                mes_atd = data_atd[4:6]
                dia_atd = data_atd[6:8]
                data_atd = dia_atd+"/"+mes_atd+"/"+ano_atd
                cliente_atd = str(atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces,5]).replace('.',',').title()
                produto_atd = str(atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces,10]).replace('.',',').title()
                valor_venda_atd = round((atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces,3]),2)
                valor_venda_atd = "R$ "+ str(valor_venda_atd)
                frete_atd = round((atendimentos_mktplaces_in.iloc[linha_atendimentos_mktplaces,2]),2)
                frete_atd = "R$ "+ str(frete_atd)
                atendimentos_mktplaces1.loc[linha_atendimentos_mktplaces] = [atendimento_atd,data_atd,cliente_atd,produto_atd,valor_venda_atd, frete_atd]
                                                            
                if str(atendimento_atd) not in df_cod_atendimento:  
                    verifica_atendimento = verifica_atendimento + 1
                    atendimentos_mktplaces = pd.concat([atendimentos_mktplaces1])
                    linhas_atendimentos = atendimentos_mktplaces.to_numpy().tolist()
                    df_cod_atendimento.append(atendimento_atd)

                linha_atendimentos_mktplaces = linha_atendimentos_mktplaces + 1

           
            linha = linha + 1 

            if (linha == 9) or (linha == 19) or (linha == 28) or (linha == 37) or (linha == 46) or (linha == 55):
                time.sleep(60)  

        if verifica_pedido >= 1:
            for row in linhas_pedidos:
                acompanhamento_pedidos.insert('','end',values=row)          
            
        if verifica_atendimento >= 1:
            for row in linhas_atendimentos:
                acompanhamento_atendimentos.insert('','end',values=row) 
      
            select_nfs = "SELECT\
                SUA.UA_DESPESA AS Frete,\
                SUA.UA_CLIENTE AS Cod_Cliente,\
                SA1.A1_NOME AS Cliente,\
                TRIM(SA1.A1_CGC) AS CPF_CNPJ,\
                SA1.A1_EST AS Estado,\
                TRIM(SA1.A1_MUN) AS Municipio,\
                SL1.L1_DOC AS NF,\
                SL1.L1_SERIE AS Serie_NF,\
                SL1.L1_EMISNF AS Data_Emissao_NF,\
                SL1.L1_HORA AS Hora_Emissao_NF, \
                SF2.F2_CHVNFE AS Chave_NFe,\
                SUB.UB_PRODUTO AS Cod_Produto, \
                SUB.UB_ZDESC AS Produto,\
                (SL1.L1_VALMERC - SUA.UA_DESCONT)  AS Valor_NF ,\
                SA4.A4_NOME AS Transportadora,\
                MKT.STATUS_ENTREGA,\
                MKT.DATA_ACOMPANHAMENTO_ENTREGA,\
                MKT.LOCAL_ACOMPANHAMENTO,\
                MKT.FASE_PIPEFY_LOGI AS Fase_Card_Logi,\
                SE1.E1_NOMCLI AS Marketplace,\
                MKT.IDCARD_PIPEFY_LOGI AS IDCard_Logi\
                FROM SUA010 SUA \
                LEFT JOIN SL1010 SL1 ON SL1.D_E_L_E_T_ = '' AND SL1.L1_FILIAL = SUA.UA_FILIAL AND SL1.L1_NUMATEN = SUA.UA_NUM \
                LEFT JOIN SA1010 SA1 ON SA1.D_E_L_E_T_ = '' AND SA1.A1_COD = SUA.UA_CLIENTE\
                LEFT JOIN SL4010 SL4 ON SL4.D_E_L_E_T_ = '' AND SL4.L4_DOC = SL1.L1_DOC  \
                LEFT JOIN SF2010 SF2 ON SF2.D_E_L_E_T_ = '' AND SF2.F2_DOC = SL1.L1_DOC  \
                LEFT JOIN SUB010 SUB ON SUB.D_E_L_E_T_ = '' AND SUB.UB_NUM = SUA.UA_NUM \
                LEFT JOIN SL2010 SL2 ON SL2.D_E_L_E_T_ = '' AND SL2.L2_DOC = SL1.L1_DOC  \
                LEFT JOIN SE1010 SE1 ON SE1.D_E_L_E_T_ = '' AND SE1.E1_NUM = SL1.L1_DOC  \
                LEFT JOIN SAE010 SAE ON SAE.D_E_L_E_T_ = '' AND SAE.AE_COD = SE1.E1_CLIENTE\
                LEFT JOIN SA4010 SA4 ON SA4.D_E_L_E_T_ = '' AND SA4.A4_COD = SUA.UA_TRANSP\
                LEFT JOIN SB1010 SB1 ON SB1.D_E_L_E_T_ = '' AND SB1.B1_COD = SUB.UB_PRODUTO\
                LEFT JOIN SB5010 SB5 ON SB5.D_E_L_E_T_ = '' AND SB5.B5_COD = SB1.B1_COD\
                LEFT JOIN ZB2010 ZB2 ON ZB2.D_E_L_E_T_ = '' AND ZB2.ZB2_CODFAM = SB1.B1_ZCODFAM\
                LEFT JOIN ZMARKETPLACE MKT ON MKT.NF = SL2.L2_DOC \
                WHERE 1=1 AND SUA.D_E_L_E_T_ = '' AND SUA.UA_VEND = '000099' AND (SUA.UA_EMISSAO >='"+min_data_ultimas_nfs+"'AND MKT.FASE_PIPEFY_LOGI <> 'Apuração' AND MKT.FASE_PIPEFY_LOGI <> 'Concluído'  AND SL1.L1_DOC <> '')\
                GROUP BY SUA.UA_FILIAL, SUA.UA_NUM,SUA.UA_EMISSAO,SUA.UA_CLIENTE,SA1.A1_NOME,SA1.A1_CGC,SA1.A1_EST, SA1.A1_MUN,SL1.L1_EMISNF,SL1.L1_HORA,SL1.L1_SERIE,SL1.L1_DOC,SUB.UB_PRODUTO,SB5.B5_CODFAM,SUB.UB_ZDESC, ZB2.ZB2_CODFAM, ZB2.ZB2_DESFAM,SUB.UB_OPER,SL1.L1_VALMERC,SUA.UA_VEND,SA4.A4_NOME,SUA.UA_TRANSP,SF2.F2_CHVNFE,SE1.E1_NOMCLI,MKT.COD_RASTREIO,MKT.COD_MARKETPLACE,MKT.STATUS_ENTREGA,MKT.DATA_ACOMPANHAMENTO_ENTREGA,MKT.LOCAL_ACOMPANHAMENTO, SUA.UA_DESPESA, SUA.UA_ENTRADA, SUA.UA_DESCONT,MKT.FASE_PIPEFY_LOGI,MKT.IDCARD_PIPEFY_LOGI"

            select_nfs = pd.read_sql(select_nfs, conn)
            qtde_nfs = select_nfs['Cod_Cliente'].count()
            novas_nfs1 = pd.DataFrame(columns=['cliente','nf','data','chave','valor'])
            novas_nfs = pd.DataFrame()
            linha_nfs = 0
            verifica_nfs = 0

            while linha_nfs <= (qtde_nfs-1):
                cliente_nfs = select_nfs.iloc[linha_nfs,2].title()
                nf_nfs = select_nfs.iloc[linha_nfs,6]
                data_nfs = select_nfs.iloc[linha_nfs,8]
                ano_nfs = data_nfs[0:4]
                mes_nfs = data_nfs[4:6]
                dia_nfs = data_nfs[6:8]
                hora_nfs = select_nfs.iloc[linha_nfs,9]
                data_nfs =  dia_nfs+"/"+mes_nfs+"/"+ano_nfs+"-"+hora_nfs
                chave_nfs = select_nfs.iloc[linha_nfs,10]
                valor_nfs = round(select_nfs.iloc[linha_nfs,13],2)
                valor_nfs = str(valor_nfs).replace(".",",")
                valor_nfs = "R$ " +valor_nfs
                
                novas_nfs1.loc[linha_nfs] = [cliente_nfs,nf_nfs,data_nfs,chave_nfs,valor_nfs]
                linha_nfs = linha_nfs + 1

                if str(nf_nfs) not in df_nf_nfs:  
                    verifica_nfs = verifica_nfs + 1
                    novas_nfs = pd.concat([novas_nfs1])
                    linhas_nfs = novas_nfs.to_numpy().tolist()
                    df_nf_nfs.append(nf_nfs)

            if verifica_nfs >= 1:
                for row in linhas_nfs:
                    acompanhamento_nfs.insert('','end',values=row)

        var_label_novos_pedidos.set('Pedidos atualizados - última atualização em '+ data_atualizacao)
        print(data_atualizacao)

    t = threading.Timer(10.0, atualiza_pedidos)
    t.start()

janela = tk.Tk()
canvas = tk.Canvas(janela)
janela.title("Marketplace")
janela.geometry('700x650+300+60')
janela.resizable(width=0,height=0)
janela.iconphoto(False,tk.PhotoImage(file='//192.168.1.16/02 - Público/09 - Marketing/Marketplaces/Inserções Manuais/Imagens/icone.png'))

abas = ttk.Notebook(janela)
aba1 = Frame(abas)
aba2 = Frame(abas)
aba3 = Frame(abas)
aba4 = Frame(abas)
abas.add(aba1,text='Vendas')
abas.add(aba2,text='Rastreio')
abas.add(aba3,text='Ocorrências')
abas.add(aba4,text='Frete')

abas.place(height=650, width=700,x=0, y=0)

acompanhamento_pedidos = ttk.Treeview(aba1, selectmode="browse", column=('pedido','data_pedido','cod_produto','produto','quantidade','valor','frete','marketplace'),show ='headings')
acompanhamento_pedidos.column('pedido',width=80, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#1', text='Pedido')
acompanhamento_pedidos.column('data_pedido',width=80, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#2', text='Data Pedido')
acompanhamento_pedidos.column('cod_produto',width=60, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#3', text=' Cód.Prod')
acompanhamento_pedidos.column('produto',width=170, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#4', text='Produto')
acompanhamento_pedidos.column('quantidade',width=40, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#5', text='Qtde')
acompanhamento_pedidos.column('valor',width=80, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#6', text='Valor')
acompanhamento_pedidos.column('frete',width=80, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#7', text='Frete')
acompanhamento_pedidos.column('marketplace',width=100, minwidth=50, stretch=NO)
acompanhamento_pedidos.heading('#8', text='Marketplace')
acompanhamento_pedidos.place(height=120, width=700,x=0, y=15)

acompanhamento_atendimentos = ttk.Treeview(aba1, selectmode="browse", column=('atendimento','dt_atendimento','cliente','produto','valor','frete'),show ='headings')
acompanhamento_atendimentos.column('atendimento',width=80, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#1', text='Atendimento')
acompanhamento_atendimentos.column('dt_atendimento',width=90, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#2', text='Data Atend.')
acompanhamento_atendimentos.column('cliente',width=180, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#3', text='Cliente')
acompanhamento_atendimentos.column('produto',width=180, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#4', text='Produto')
acompanhamento_atendimentos.column('valor',width=80, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#5', text='Valor')
acompanhamento_atendimentos.column('frete',width=80, minwidth=50, stretch=NO)
acompanhamento_atendimentos.heading('#6', text='Frete')
acompanhamento_atendimentos.place(height=120, width=700,x=0, y=155)

acompanhamento_nfs = ttk.Treeview(aba1, selectmode="browse", column=('Cliente','NF','Data Emissão','Chave NF-e','Valor NF'),show ='headings')
acompanhamento_nfs.column('Cliente',width=120, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#1', text='Cliente')
acompanhamento_nfs.column('NF',width=70, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#2', text='NF')
acompanhamento_nfs.column('Data Emissão',width=100, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#3', text='Data Emissão')
acompanhamento_nfs.column('Chave NF-e',width=300, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#4', text='Chave NF-e')
acompanhamento_nfs.column('Valor NF',width=100, minwidth=50, stretch=NO)
acompanhamento_nfs.heading('#5', text='Valor NF')
acompanhamento_nfs.place(height=120, width=700,x=0, y=295)

acompanhamento_entregas = ttk.Treeview(aba1, selectmode="browse", column=('nf','fase_logi','transportadora','status_entrega','data_status'),show ='headings')
acompanhamento_entregas.column('nf',width=120, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#1', text='NF')
acompanhamento_entregas.column('fase_logi',width=70, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#2', text='Fase Logi')
acompanhamento_entregas.column('transportadora',width=100, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#3', text='Transp')
acompanhamento_entregas.column('status_entrega',width=300, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#4', text='Status')
acompanhamento_entregas.column('data_status',width=100, minwidth=50, stretch=NO)
acompanhamento_entregas.heading('#5', text='Data Status')
acompanhamento_entregas.place(height=120, width=700,x=0, y=435)

var_label_novos_pedidos = StringVar()
label_novos_pedidos = tk.Label(aba1, textvariable=var_label_novos_pedidos).place(x=8,y=600)

###ocorrencias###

def inserir_ocorrencia():
    entrada_atendimento_ocor2 = str(entrada_atendimento_ocor.get())
    entrada_tipo_ocor2 = str(entrada_tipo_ocor.get())
    entrada_descricao_ocor2 = entrada_descricao_ocor.get()
    
    ok_cancelar = messagebox.askokcancel("Atenção", "Você deseja mesmo inserir as informações?")
    
    query_inserir_ocorrencia = "INSERT INTO ZMARKETPLACE_OCORRENCIAS (\
                                ATENDIMENTO,\
                                TIPO_OCORRENCIA, \
                                DESCRICAO_OCORRENCIA\
                                ) \
                                VALUES\
                                (\
                                    '"+entrada_atendimento_ocor2+"',\
                                    '"+entrada_tipo_ocor2+"',\
                                    '"+entrada_descricao_ocor2+"'\
                                )"
    cursor.execute(query_inserir_ocorrencia)
    conn.commit()
    
    entrada_atendimento_ocor.set('')
    entrada_tipo_ocor.set('')
    entrada_descricao_ocor.set('')

label_atendimento_ocor = tk.Label(aba3, text="Atendimento", fg="black").place(x=18,y=10)
entrada_atendimento_ocor = tk.StringVar()
ent_atendimento_ocor = tk.Entry(aba3,fg="black", width=20,textvariable = entrada_atendimento_ocor).place(x=18,y=30)

label_tipo_ocor = tk.Label(aba3, text="Tipo da Ocorrência", fg="black").place(x=188,y=10)
entrada_tipo_ocor = tk.StringVar()
ent_tipo_ocor = ttk.Combobox(aba3,values=['Mau estado - Sem NF','Mau estado','Faltando peça','Modelo errado enviado','Medidas erradas','Danificado pela transportadora','Erro de variação','Comprou errado','Arrependimento'],textvariable = entrada_tipo_ocor,width=25).place(x=188,y=30)

label_descricao_ocor = tk.Label(aba3, text="Descrição da ocorrência", fg="black").place(x=18,y=50)
entrada_descricao_ocor = StringVar()
ent_descricao_ocor = tk.Entry(aba3,fg="black", width=100).place(x=18,y=70)

botao_ok_ocor = tk.Button(aba3, text='Criar Ocorrência', width=12, command=inserir_ocorrencia ).place(x=200,y=100)
botao_limpar_ocor = tk.Button(aba3, text='Limpar', width=12 ).place(x=300,y=100)

acompanhamento_ocorrencias = ttk.Treeview(aba3, selectmode="browse", column=('nf','produto','cliente','data_ult_acompanhamento','tipo_ocorrencia'),show ='headings')
acompanhamento_ocorrencias.column('nf',width=90, minwidth=50, stretch=NO)
acompanhamento_ocorrencias.heading('#1', text='NF')
acompanhamento_ocorrencias.column('produto',width=200, minwidth=50, stretch=NO)
acompanhamento_ocorrencias.heading('#2', text='Produto')
acompanhamento_ocorrencias.column('cliente',width=200, minwidth=50, stretch=NO)
acompanhamento_ocorrencias.heading('#3', text='Cliente')
acompanhamento_ocorrencias.column('data_ult_acompanhamento',width=100, minwidth=50, stretch=NO)
acompanhamento_ocorrencias.heading('#4', text='Data Entrega')
acompanhamento_ocorrencias.column('tipo_ocorrencia',width=110, minwidth=50, stretch=NO)
acompanhamento_ocorrencias.heading('#5', text='Ocorrência')
acompanhamento_ocorrencias.place(height=200, width=700,x=0, y=140)

lbl_atd_ocor = tk.Label(aba3, text="Atendimento", fg="black").place(x=10,y=340)
var_atd_ocor = StringVar()
txt_atd_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_atd_ocor, width = 15, state=DISABLED).place(x=10,y=360)

lbl_nf_ocor = tk.Label(aba3, text="Nota Fiscal", fg="black").place(x=120,y=340)
var_nf_ocor = StringVar()
txt_nf_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_nf_ocor, width = 15, state=DISABLED).place(x=120,y=360)

lbl_emissao_nf_ocor = tk.Label(aba3, text="Data Emissão NF", fg="black").place(x=220,y=340)
var_emissao_nf_ocor = StringVar()
txt_emissao_nf_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_emissao_nf_ocor, width = 15, state=DISABLED).place(x=220,y=360)

lbl_valor_nf_ocor = tk.Label(aba3, text="Valor NF", fg="black").place(x=320,y=340)
var_valor_nf_ocor = StringVar()
txt_valor_nf_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_valor_nf_ocor, width = 15, state=DISABLED).place(x=320,y=360)

lbl_cod_cliente_ocor = tk.Label(aba3, text="Cod.Cliente", fg="black").place(x=10,y=380)
var_cod_cliente_ocor = StringVar()
txt_cod_cliente_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_cod_cliente_ocor, width = 15, state=DISABLED).place(x=10,y=400) 

lbl_cliente_ocor = tk.Label(aba3, text="Cliente", fg="black").place(x=120,y=380)
var_cliente_ocor = StringVar()
txt_cliente_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_cliente_ocor, width = 50, state=DISABLED).place(x=120,y=400)

lbl_cod_prod_ocor = tk.Label(aba3, text="Cod.Produto", fg="black").place(x=10,y=420)
var_cod_prod_ocor = StringVar()
txt_cod_prod_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_cod_prod_ocor, width = 15, state=DISABLED).place(x=10,y=440)

lbl_produto_ocor = tk.Label(aba3, text="Produto", fg="black").place(x=120,y=420)
var_produto_ocor = StringVar()
txt_produto_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_produto_ocor, width = 50, state=DISABLED).place(x=120,y=440)

lbl_marketplace_ocor = tk.Label(aba3, text="Marketplace", fg="black").place(x=10,y=460)
var_marketplace_ocor = StringVar()
txt_marketplace_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_marketplace_ocor, width = 30, state =DISABLED).place(x=10,y=480)

lbl_transportadora_ocor = tk.Label(aba3, text="Transportadora", fg="black").place(x=210,y=460)
var_transportadora_ocor = StringVar()
txt_transportadora_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_transportadora_ocor, width = 35, state=DISABLED).place(x=210,y=480)

lbl_status_sac_ocor = tk.Label(aba3, text="Status da Ocorrência", fg="black").place(x=10,y=500)
var_status_sac_ocor = StringVar()
txt_status_sac_ocor = tk.Entry(aba3, bg= "#eff0f1", textvariable = var_status_sac_ocor, width = 20, state=DISABLED).place(x=10,y=520)

lbl_atualizacao_atd = tk.Label(aba3, text = "Atualização da Ocorrência", bg= "#eff0f1").place(x=150,y=500)
var_atualizacao_ocor = StringVar()
txt_atualizacao_atd = scrolledtext.ScrolledText(aba3, bg= "#eff0f1", state=DISABLED).place( x=150, y=520, height=60, width=300)

var_label_ocorrencias = StringVar()
label_atualizacao_ocorrencias = tk.Label(aba3, text='Programar_atualização').place(x=8,y=600)

###Rastreio###

label_nf_rastreio = tk.Label(aba2, text="Nota Fiscal", fg="black").place(x=10,y=10)
entrada_nf_rastreio = tk.StringVar()
ent_nf_rastreio = tk.Entry(aba2,fg="black", width=15, textvariable = entrada_nf_rastreio).place(x=10,y=30)

label_cod_rastreio = tk.Label(aba2, text="Rastreio", fg="black").place(x = 110,y=10)
entrada_cod_rastreio = tk.StringVar()
ent_cod_rastreio = tk.Entry(aba2, fg="black", width=25, textvariable = entrada_cod_rastreio).place(x=110,y=30)

label_pedido_rastreio = tk.Label(aba2, text="Pedido", fg="black").place(x=270,y=10)
entrada_pedido_rastreio = tk.StringVar()
ent_pedido_rastreio = tk.Entry(aba2,fg="black", width=25, textvariable = entrada_pedido_rastreio).place(x=270,y=30)

botao_ok_rastreio = tk.Button(aba2, text='Inserir', width=10 ).place(x=100, y=60)
botao_limpar_rastreio = tk.Button(aba2, text='Limpar', width=10 ).place(x=210, y=60)

acompanhamento_rastreios = ttk.Treeview(aba2, selectmode="browse", column=('nf','cod_produto','produto','cliente','data_expedicao','transportadora'),show ='headings')
acompanhamento_rastreios.column('nf',width=80, minwidth=50, stretch=NO)
acompanhamento_rastreios.heading('#1', text='NF')
acompanhamento_rastreios.column('cod_produto',width=80, minwidth=50, stretch=NO)
acompanhamento_rastreios.heading('#2', text='Cod.Produto')
acompanhamento_rastreios.column('produto',width=160, minwidth=50, stretch=NO)
acompanhamento_rastreios.heading('#3', text='Produto')
acompanhamento_rastreios.column('cliente',width=160, minwidth=50, stretch=NO)
acompanhamento_rastreios.heading('#4', text='Cliente')
acompanhamento_rastreios.column('data_expedicao',width=90, minwidth=50, stretch=NO)
acompanhamento_rastreios.heading('#5', text='Data Expedição')
acompanhamento_rastreios.column('transportadora',width=120, minwidth=50, stretch=NO)
acompanhamento_rastreios.heading('#6', text='Transportadora')
acompanhamento_rastreios.place(height=200, width=700,x=0, y=100)

lbl_atd_rastreio = tk.Label(aba2, text="Atendimento", fg="black").place(x=10,y=300)
var_atd_rastreio = StringVar()
txt_atd_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_atd_rastreio, width = 15, state=DISABLED).place(x=10,y=320)

lbl_nf_rastreio = tk.Label(aba2, text="Nota Fiscal", fg="black").place(x=120,y=300)
var_nf_rastreio = StringVar()
txt_nf_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_nf_rastreio, width = 15, state=DISABLED).place(x=120,y=320)

lbl_emissao_nf_rastreio = tk.Label(aba2, text="Data Emissão NF", fg="black").place(x=220,y=300)
var_emissao_nf_rastreio = StringVar()
txt_emissao_nf_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_emissao_nf_rastreio, width = 15, state=DISABLED).place(x=220,y=320)

lbl_valor_nf_rastreio = tk.Label(aba2, text="Valor NF", fg="black").place(x=320,y=300)
var_valor_nf_rastreio = StringVar()
txt_valor_nf_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_valor_nf_rastreio, width = 15, state=DISABLED).place(x=320,y=320)

lbl_cod_cliente_rastreio = tk.Label(aba2, text="Cod.Cliente", fg="black").place(x=10,y=340)
var_cod_cliente_rastreio = StringVar()
txt_cod_cliente_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_cod_cliente_rastreio, width = 15, state=DISABLED).place(x=10,y=360) 

lbl_cliente_rastreio = tk.Label(aba2, text="Cliente", fg="black").place(x=120,y=340)
var_cliente_rastreio = StringVar()
txt_cliente_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_cliente_rastreio, width = 50, state=DISABLED).place(x=120,y=360)

lbl_cod_prod_rastreio = tk.Label(aba2, text="Cod.Produto", fg="black").place(x=10,y=380)
var_cod_prod_rastreio = StringVar()
txt_cod_prod_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_cod_prod_rastreio, width = 15, state=DISABLED).place(x=10,y=400)

lbl_produto_rastreio = tk.Label(aba2, text="Produto", fg="black").place(x=120,y=380)
var_produto_rastreio = StringVar()
txt_produto_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_produto_rastreio, width = 50, state=DISABLED).place(x=120,y=400)

lbl_marketplace_rastreio = tk.Label(aba2, text="Marketplace", fg="black").place(x=10,y=420)
var_marketplace_rastreio = StringVar()
txt_marketplace_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_marketplace_rastreio, width = 30, state =DISABLED).place(x=10,y=440)

lbl_transportadora_rastreio = tk.Label(aba2, text="Transportadora", fg="black").place(x=210,y=420)
var_transportadora_rastreio = StringVar()
txt_transportadora_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_transportadora_rastreio, width = 35, state=DISABLED).place(x=210,y=440)

lbl_pedido_rastreio = tk.Label(aba2, text="Cod.Pedido", fg="black").place(x=10,y=460)
var_pedido_rastreio = StringVar()
txt_pedido_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_pedido_rastreio, width = 20, state=DISABLED).place(x=10,y=480)

lbl_status_entrega_rastreio = tk.Label(aba2, text = "Status Entrega", bg= "#eff0f1").place(x=150,y=460)
var_status_entrega_rastreio = StringVar()
txt_status_entrega_rastreio = tk.Entry(aba2, bg= "#eff0f1", state=DISABLED, width= 45).place( x=150, y=480)

lbl_ult_acomp_rastreio = tk.Label(aba2, text="Data Acompanhamento", fg="black").place(x=10,y=500)
var_ult_acomp_rastreio = StringVar()
txt_ult_acomp_rastreio = tk.Entry(aba2, bg= "#eff0f1", textvariable = var_ult_acomp_rastreio, width = 20, state=DISABLED).place(x=10,y=520)

lbl_local_ultimo_acomp_rastreio = tk.Label(aba2, text = "Local Acompanhamento", bg= "#eff0f1").place(x=150,y=500)
var_local_ultimo_acomp_rastreio = StringVar()
txt_local_ultimo_acomp_rastreio = tk.Entry(aba2, bg= "#eff0f1", state=DISABLED, width= 45).place( x=150, y=520)

var_label_rastreios = StringVar()
label_atualizacao_rastreios = tk.Label(aba2, text='Programar_atualização').place(x=8,y=600)

###Frete###

label_cod_prod_cf = tk.Label(aba4, text="Cod.Produto", fg="black").place(x=48,y=10)
entrada_cod_prod_cf = tk.StringVar()
ent_cod_prod_cf = tk.Entry(aba4,fg="black", width=10, textvariable = entrada_cod_prod_cf).place(x=50,y=30)

label_cpf_cnpj_cf = tk.Label(aba4, text="CPF/CNPJ", fg="black").place(x = 148,y=10)
entrada_cpf_cnpj_cf = tk.StringVar()
entrada_cpf_cnpj_cf = tk.Entry(aba4, fg="black", width=25, textvariable = entrada_cpf_cnpj_cf).place(x=150,y=30)

label_cep_cf = tk.Label(aba4, text="CEP", fg="black").place(x=338,y=10)
entrada_cep_cf = tk.StringVar()
ent_cep_cf = tk.Entry(aba4,fg="black", width=20, textvariable = entrada_cep_cf).place(x=340,y=30)

label_valor_nf_cf = tk.Label(aba4, text="Valor da NF", fg="black").place(x=498,y=10)
entrada_valor_nf_cf = tk.StringVar()
ent_valor_nf_cf = tk.Entry(aba4,fg="black", width = 20, textvariable = entrada_valor_nf_cf).place(x=500,y=30)

botao_ok_cf = tk.Button(aba4, text='Consultar', width=10 ).place(x=200, y=60)
botao_limpar_cf = tk.Button(aba4, text='Limpar', width=10 ).place(x=360, y=60)

lbl_cod_prod_cf = tk.Label(aba4, text="Cod.Produto", fg="black").place(x=48,y=90)
var_cod_prod_cf = StringVar()
txt_cod_prod_cf = tk.Entry(aba4, bg= "#eff0f1", textvariable = var_cod_prod_cf, width = 10, state=DISABLED).place(x=50,y=110)

lbl_produto_cf = tk.Label(aba4, text="Produto", fg="black").place(x=128,y=90)
var_produto_cf = StringVar()
txt_produto_cf = tk.Entry(aba4, bg= "#eff0f1", textvariable = var_produto_cf, width = 50, state=DISABLED).place(x=130,y=110)

lbl_alt_prod_cf = tk.Label(aba4, text="Altura", fg="black").place(x=48,y=130)
var_alt_prod_cf = StringVar()
txt_alt_prod_cf = tk.Entry(aba4, bg= "#eff0f1", textvariable = var_alt_prod_cf, width = 10, state=DISABLED).place(x=50,y=150)

lbl_larg_prod_cf = tk.Label(aba4, text="Largura", fg="black").place(x=128,y=130)
var_larg_prod_cf = StringVar()
txt_larg_prod_cf = tk.Entry(aba4, bg= "#eff0f1", textvariable = var_larg_prod_cf, width = 10, state=DISABLED).place(x=130,y=150)

lbl_prof_prod_cf = tk.Label(aba4, text="Profundidade", fg="black").place(x=208,y=130)
var_prof_prod_cf = StringVar()
txt_prof_prod_cf = tk.Entry(aba4, bg= "#eff0f1", textvariable = var_prof_prod_cf, width = 10, state=DISABLED).place(x=210,y=150) 

lbl_peso_bruto_prod_cf = tk.Label(aba4, text="Peso Bruto", fg="black").place(x=288,y=130)
var_peso_bruto_prod_cf = StringVar()
txt_peso_bruto_prod_cf = tk.Entry(aba4, bg= "#eff0f1", textvariable = var_peso_bruto_prod_cf, width = 10, state=DISABLED).place(x=290,y=150)

lbl_stk_prod_cf = tk.Label(aba4, text="Estoque", fg="black").place(x=368,y=130)
var_stk_prod_cf = StringVar()
txt_stk_prod_cf = tk.Entry(aba4, bg= "#eff0f1", textvariable = var_stk_prod_cf, width = 10, state=DISABLED).place(x=370,y=150)

acompanhamento_cf = ttk.Treeview(aba4, selectmode="browse", column=('Transportadora','Preço','Prazo'),show ='headings')
acompanhamento_cf.column('Transportadora',width=200, minwidth=50, stretch=NO)
acompanhamento_cf.heading('#1', text='Transportadora')
acompanhamento_cf.column('Preço',width=150, minwidth=50, stretch=NO)
acompanhamento_cf.heading('#2', text='Preço')
acompanhamento_cf.column('Prazo',width=148, minwidth=50, stretch=NO)
acompanhamento_cf.heading('#3', text='Prazo')
acompanhamento_cf.place(height=180, width=500,x=80, y=200)

var_label_consulta_frete = StringVar()
label_atualizacao_consulta_frete = tk.Label(aba4, text='Programar_atualização').place(x=8,y=600)

t = threading.Timer(1.0, atualiza_pedidos)
t.start()

janela.mainloop()
