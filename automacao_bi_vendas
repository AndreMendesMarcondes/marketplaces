from os import X_OK
import pandas as pd
import requests
import numpy as np
import json
import pyodbc
from selenium import webdriver
import selenium
from selenium.webdriver.chrome import options
from selenium.webdriver.chrome.options import Options
from time import sleep
from requests.auth import HTTPBasicAuth

server = '*******' 
database = '********' 
username = '*******' 
password = '********' 
conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password)
cursor = conn.cursor()

vendas_mktplaces_query = "SELECT SUA.UA_NUM AS Atendimento,SUA.UA_EMISSAO AS Data_Atendimento,SUA.UA_DESPESA AS Frete,(SUA.UA_ENTRADA - SUA.UA_DESPESA) AS Valor_Venda,SUA.UA_CLIENTE AS Cod_Cliente,SA1.A1_NOME AS Cliente,TRIM(SA1.A1_CGC) AS CPF_CNPJ, SA1.A1_EST AS Estado, TRIM(SA1.A1_MUN) AS Municipio,TRIM(SL1.L1_DOC) AS NF,SL1.L1_SERIE AS Serie_NF,SL1.L1_EMISNF AS Data_Emissao_NF, SL1.L1_HORA AS Hora_Emissao_NF, SF2.F2_CHVNFE AS Chave_NFe,SUB.UB_PRODUTO AS Cod_Produto, SUB.UB_ZDESC AS Produto,ZB2.ZB2_DESFAM AS Categoria, SUB.UB_OPER AS Operacao, SL1.L1_VALMERC AS Valor_NF , SUA.UA_VEND AS Cod_Vendedor, SA4.A4_NOME AS Transportadora, MKT.COD_RASTREIO, MKT.COD_MARKETPLACE,MKT.STATUS_ENTREGA,MKT.DATA_ACOMPANHAMENTO_ENTREGA, MKT.LOCAL_ACOMPANHAMENTO, SE1.E1_NOMCLI AS Nome_Cliente, MKT.FASE_PIPEFY_LOGI AS Fase_Card_Logi, MKT.IDCARD_PIPEFY_LOGI AS IDCard_Logi  FROM SUA010 SUA  LEFT JOIN SL1010 SL1 ON SL1.D_E_L_E_T_ = '' AND SL1.L1_FILIAL = SUA.UA_FILIAL AND SL1.L1_NUMATEN = SUA.UA_NUM LEFT JOIN SA1010 SA1 ON SA1.D_E_L_E_T_ = '' AND SA1.A1_COD = SUA.UA_CLIENTE LEFT JOIN SL4010 SL4 ON SL4.D_E_L_E_T_ = '' AND SL4.L4_DOC = SL1.L1_DOC LEFT JOIN SF2010 SF2 ON SF2.D_E_L_E_T_ = '' AND SF2.F2_DOC = SL1.L1_DOC  LEFT JOIN SUB010 SUB ON SUB.D_E_L_E_T_ = '' AND SUB.UB_NUM = SUA.UA_NUM LEFT JOIN SL2010 SL2 ON SL2.D_E_L_E_T_ = '' AND SL2.L2_DOC = SL1.L1_DOC  LEFT JOIN SE1010 SE1 ON SE1.D_E_L_E_T_ = '' AND SE1.E1_NUM = SL1.L1_DOC  LEFT JOIN SAE010 SAE ON SAE.D_E_L_E_T_ = '' AND SAE.AE_COD = SE1.E1_CLIENTE  LEFT JOIN SA4010 SA4 ON SA4.D_E_L_E_T_ = '' AND SA4.A4_COD = SUA.UA_TRANSP LEFT JOIN SB1010 SB1 ON SB1.D_E_L_E_T_ = '' AND SB1.B1_COD = SUB.UB_PRODUTO LEFT JOIN SB5010 SB5 ON SB5.D_E_L_E_T_ = '' AND SB5.B5_COD = SB1.B1_COD LEFT JOIN ZB2010 ZB2 ON ZB2.D_E_L_E_T_ = '' AND ZB2.ZB2_CODFAM = SB1.B1_ZCODFAM LEFT JOIN ZMARKETPLACE MKT ON MKT.NF = SL2.L2_DOC WHERE 1=1 AND SUA.D_E_L_E_T_ = ''  AND SUA.UA_VEND = '000099' AND (SUA.UA_EMISSAO > '20220101' OR SL1.L1_DOC <>'') GROUP BY SUA.UA_FILIAL, SUA.UA_NUM,SUA.UA_EMISSAO,SUA.UA_CLIENTE,SA1.A1_NOME,SA1.A1_CGC,SA1.A1_EST, SA1.A1_MUN,SL1.L1_EMISNF,SL1.L1_HORA,SL1.L1_SERIE,SL1.L1_DOC,SUB.UB_PRODUTO,SB5.B5_CODFAM,SUB.UB_ZDESC, ZB2.ZB2_CODFAM, ZB2.ZB2_DESFAM,SUB.UB_OPER,SL1.L1_VALMERC,SUA.UA_VEND,SA4.A4_NOME,SUA.UA_TRANSP,SF2.F2_CHVNFE,SE1.E1_NOMCLI,MKT.COD_RASTREIO,MKT.COD_MARKETPLACE,MKT.STATUS_ENTREGA,MKT.DATA_ACOMPANHAMENTO_ENTREGA,MKT.LOCAL_ACOMPANHAMENTO, MKT.FASE_PIPEFY_LOGI, SUA.UA_DESPESA, SUA.UA_ENTRADA,MKT.IDCARD_PIPEFY_LOGI"
vendas_mktplaces = pd.read_sql(vendas_mktplaces_query, conn)

vendas_mktplace_planilha =  pd.DataFrame(columns=['Atendimento', 'Valor Atendimento', 'Frete destacado','Código Cliente', 'Nome Cliente', 'CPF_CNPJ', 'Endereço', 'NF','Serie NF', 'Data emissão', 'Hora Emissão NF', 'Chave NF-e', 'Valor NF', 'Cód. Produto', 'Produto', 'Transportadora', 'Fase do Card','Id Card', 'Marketplace','Status Entrega', 'Data Acompanhamento Entrega','Último local da Entrega'])

nfs_vendas_marketplaces = vendas_mktplaces['NF'].dropna()
nfs_vendas_marketplaces.to_excel('C:/Users/Thales.Bartolomeu/Desktop/MKTPLACE/nfs.xlsx')
nf_in_zmktplace = "SELECT NF FROM ZMARKETPLACE"
nf_in_zmktplace = pd.read_sql(nf_in_zmktplace, conn)
qtde_vendas = nfs_vendas_marketplaces.count()
linha = 0
situacao_transp = 'Não disponível'
nfs = nf_in_zmktplace['NF'].to_list()
nfs2 = []
linha_nf = 0

for nf in nfs:
    nfs2.append(str(nf))

while linha_nf <= (qtde_vendas-1):
    if str(nfs_vendas_marketplaces.iloc[linha_nf]) != '':
        nf_to_zmktplace = int(nfs_vendas_marketplaces.iloc[linha_nf])
        nf_to_zmktplace =str(nf_to_zmktplace)

        if (nf_to_zmktplace not in nfs2):
            insert_nf_into_zmktplace = "INSERT INTO ZMARKETPLACE (NF) VALUES ("+nf_to_zmktplace+")" 
            cursor.execute(insert_nf_into_zmktplace)
            conn.commit()

    linha_nf = linha_nf + 1
print('okay')
vendas_mktplace = pd.read_sql(vendas_mktplaces_query, conn)
vendas_mktplace = vendas_mktplace.fillna('')

while linha <= (qtde_vendas-1):
    situacao_transp = 'Não disponível'
    atendimento = vendas_mktplace.iloc[linha,0]
    frete = vendas_mktplace.iloc[linha,2]
    valor_venda = vendas_mktplace.iloc[linha,3]
    cidade = vendas_mktplace.iloc[linha,8]
    estado = vendas_mktplace.iloc[linha,7]
    endereco = "Brasil," + str(estado) + "," + str(cidade) 
    cod_produto = vendas_mktplace.iloc[linha,14]
    produto = vendas_mktplace.iloc[linha,15]
    cod_cliente = vendas_mktplace.iloc[linha,4]
    nome_cliente = vendas_mktplace.iloc[linha,5]
    cpf_cnpj = vendas_mktplace.iloc[linha,6]
    valor_nf = vendas_mktplace.iloc[linha,18]
    nf = vendas_mktplace.iloc[linha,9]
    data_emissao_nf = vendas_mktplace.iloc[linha,11]
    hora_emissao_nf = vendas_mktplace.iloc[linha,12]
    chave_nf = vendas_mktplace.iloc[linha,13]
    serie_nf = vendas_mktplace.iloc[linha,10]
    transportadora = vendas_mktplace.iloc[linha,20]
    transportadora = str(transportadora)
    cod_rastreio = vendas_mktplace.iloc[linha,21]
    cod_marketplace = vendas_mktplace.iloc[linha,22]
    status_entrega = vendas_mktplace.iloc[linha,23]
    dt_acomp_entrega = vendas_mktplace.iloc[linha,24]
    ult_local_acomp = vendas_mktplace.iloc[linha,25]
    marketplace = vendas_mktplace.iloc[linha,26]
    marketplace = str(marketplace)
    fase_card_logistica = vendas_mktplace.iloc[linha,27]
    fase_card_logistica = str(fase_card_logistica)
    id_card_logistica = vendas_mktplace.iloc[linha,28]
    id_card_logistica = str(id_card_logistica)
   

    status_entrega_atual = "Não disponível"
    dt_acomp_entrega_atual = "Não disponível"
    ult_local_acomp_atual = "Não disponível"

    if transportadora =='':
        transportadora = 'Não informada'
    if 'RODONAVES' in transportadora:
        transportadora = 'Rodonaves'
    if 'BRASPRESS' in transportadora:
        transportadora = 'Braspress'
    if 'CORREIOS' in transportadora:
        transportadora = 'Correios'
    if 'TRANS EXPRESS' in transportadora:
        transportadora = 'Trans Express'
    if 'HAPPENING' in transportadora:
        transportadora = 'Happening'

    if transportadora == 'Rodonaves' and status_entrega != 'Entrega Concluída' :
        headers= {'Content-Type':'application/json'}
        url_autenticacao= "https://01wapi.rte.com.br/token"
        parametros= {'auth_type':'dev', 'grant_type':'password','username':'ZANOTTI', 'password':'7EPC6I8Z'}
        autenticacao = requests.request("POST", url_autenticacao, headers=headers, data=parametros)
        autenticacao=(autenticacao.text)
        autenticacao = "["+autenticacao+"]"
        autenticacao = pd.read_json(autenticacao)
        token = str(autenticacao.iloc[0,0])
        header_transportadora= {"Authorization": "Bearer "+token, "Content-Type":"application/json" }
        cpf_cnpj = str(cpf_cnpj)
        nf = str(nf)
        url_transportadora = "https://01wapi.rte.com.br/api/v1/rastreio-mercadoria?taxIdRegistration="+cpf_cnpj+"&invoiceNumber="+nf
        response_transportadora = requests.request("GET", url_transportadora, headers=header_transportadora)
        situacao_transp = (response_transportadora.json())
        situacao_transp = pd.DataFrame(situacao_transp)
        situacao_transp = situacao_transp.iloc[-1]
        situacao_transp = pd.DataFrame(situacao_transp)
        status_entrega_atual = situacao_transp.iloc[0,0]
                
        if str(status_entrega)=='':
            status_entrega_atual = 'Não disponível'
            dt_acomp_entrega_atual = 'Não disponível'
            ult_local_acomp_atual = 'Não disponível'
        else:
            status_entrega_atual = pd.DataFrame(status_entrega_atual)
            status_entrega_atual = status_entrega_atual.iloc[5,0]
            dt_acomp_entrega_atual = status_entrega_atual['Date']
            status_entrega_atual =  status_entrega_atual['Description']
        if "ENTREGA FINALIZADA" in str(status_entrega_atual):
            status_entrega_atual = 'Entrega concluída'
           
    if transportadora == 'Braspress' and status_entrega != 'Entrega concluída':
        #headers_transportadora = {'Content-Type':'application/json'}
        #nf = str(nf)
        #url_transportadora = 'https://hml-api.braspress.com/v1/tracking/55963771000176/'+nf+'/json'
        #response_transportadora = requests.request("GET", url=url_transportadora, auth=HTTPBasicAuth('ZANOTTI_HML', '#3&Jw23rZ7Y%$w&O'),headers=headers_transportadora)
        status_entrega_atual = 'API em Homologação'
        dt_acomp_entrega_atual = 'API em Homologação'
        ult_local_acomp_atual = 'API em Homologação'

    if transportadora == 'Correios' and cod_rastreio != '' and status_entrega !='Entrega concluída':
        options = webdriver.ChromeOptions()
        options.add_argument("--headless")
        cod_rastreio = str(cod_rastreio)
        navegador = webdriver.Chrome('//192.168.1.16/02 - Público/09 - Marketing/Marketplaces/Ferramentas/chromedriver.exe', chrome_options=options)
        navegador.get('https://www.linkcorreios.com.br/?id='+cod_rastreio)
        sleep(1)

        status_entrega_atual = navegador.find_element_by_xpath('//*[@id="page"]/main/div[4]/div/div/div[1]/div/div/ul/li[1]/b').text
        data_atual = navegador.find_element_by_xpath('//*[@id="page"]/main/div[4]/div/div/div[1]/div/div/ul/li[2]').text
        local_atual = navegador.find_element_by_xpath('//*[@id="page"]/main/div[4]/div/div/div[1]/div/div/ul/li[3]').text

        status_entrega_atual = str(status_entrega_atual)
        dt_acomp_entrega_atual = str(data_atual)
        ult_local_acomp_atual = str(local_atual)

        if 'Objeto entregue' in status_entrega_atual:
            status_entrega_atual = 'Entrega concluída'
    
    if data_emissao_nf > '20211215':
        update_entrega = "UPDATE ZMARKETPLACE SET STATUS_ENTREGA ='"+status_entrega_atual+"', DATA_ACOMPANHAMENTO_ENTREGA ='"+dt_acomp_entrega_atual+"', LOCAL_ACOMPANHAMENTO = '"+ult_local_acomp_atual+"' WHERE NF = '"+nf+"'"
        cursor.execute(update_entrega)
        conn.commit()
    '''
    if status_entrega != status_entrega_atual:
       payaload_pipefy_atualiza_card = {"query":"mutation {updateFieldsValues(input:{nodeId:"+id_card+" values: [ { fieldId: \"status_entrega\" value: \""+status_entrega_atual+"\" }, { fieldId: \"data_status\" value: \""+dt_acomp_entrega_atual+"\" }, { fieldId: \"local_status\" value: \""+ult_local_acomp_atual+"\" }   ]  }){    success    userErrors{field message}    updatedNode{...on Card{id fields{name value}}  }  }"} 
    '''

    if 'B2W' in marketplace:
        marketplace = 'Americanas'
    if 'MERCADO LIVRE' in marketplace:
        marketplace = 'Mercado Livre'
    if 'MM' in marketplace:
        marketplace = 'MadeiraMadeira'
    if 'ML' in marketplace:
        marketplace = 'Mercado Livre'
    if 'MAGALU' in marketplace:
        marketplace = 'Magalu'
    if 'AMAZON' in marketplace:
        marketplace = 'Amazon'
    if 'MERCADO' in marketplace:
        marketplace = "Mercado livre"

    nf = str(nf)
    atendimento = str(atendimento)
    if nf != '' and fase_card_logistica !='Concluído':
        url_pipefy = "https://api.pipefy.com/graphql"

        payload_card_pipefy = {"query": "{cards(pipe_id:301530575, search:{title:\""+atendimento+"\"}) {  edges {  node{ id title current_phase {id name} fields {name report_value updated_at value}}    }  }}"}
        print(payload_card_pipefy)
        headers_pipefy = {
            "Accept": "application/json",
            "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyIjp7ImlkIjo5NjExMjYsImVtYWlsIjoibWFya2V0aW5nQHphbm90dGlyZWZyaWdlcmFjYW8uY29tLmJyIiwiYXBwbGljYXRpb24iOjMwMDEzNDkxM319.VIgfDCDN7Vb_HpBbBCqNi0cyoJT5AeDU_tT5OhZv6IBbkqRYTMYyfhFobu4d7KrSAYGRN7BKDlT2Ls_rO5ZK2A",
            "Content-Type": "application/json"
        }
        response_card_pipefy = requests.request("POST", url_pipefy, json=payload_card_pipefy, headers=headers_pipefy)
        df_card_pipefy = json.loads(response_card_pipefy.content)
        df_card_pipefy = pd.DataFrame(df_card_pipefy)
        card = df_card_pipefy.iloc[0,0]
        card = pd.DataFrame(card)
        id_card = ''

        if card.empty:
            atendimento_card = ''
        else:
            card =card.iloc[0,0]
            card = pd.DataFrame(card)
            id_card = card.iloc[2,0]
            id_card = str(id_card)
            atendimento_card = card.iloc[3,0]
            atendimento_card = str(atendimento_card)
            card = card.iloc[0,0]
            fase_card = str(card['name'])

        if atendimento_card != atendimento:
            fase_card = 'Não há card'
            id_card = 'Não há card'
        
        if id_card != '':
            update_fase_card = "UPDATE ZMARKETPLACE SET FASE_PIPEFY_LOGI ='"+fase_card+"', IDCARD_PIPEFY_LOGI ='"+id_card+"'WHERE NF ='"+nf+"'"
            cursor.execute(update_fase_card)
            conn.commit()

    if nf =='':
        fase_card = 'Sem NF'
        id_card = 'Sem NF'
    if fase_card_logistica == 'Concluído':
        fase_card = 'Concluído'

    vendas_mktplace_planilha.loc[linha] = [atendimento, valor_venda, frete, cod_cliente, nome_cliente, cpf_cnpj, endereco, nf,serie_nf, data_emissao_nf, hora_emissao_nf, chave_nf, valor_nf, cod_produto, produto, transportadora, fase_card, id_card,marketplace,status_entrega,dt_acomp_entrega, ult_local_acomp]
    vendas_mktplace_planilha = pd.concat([vendas_mktplace_planilha])
                
    linha = linha + 1
#vendas_mktplace_planilha.to_excel('C:/Users/Thales.Bartolomeu/Desktop/MKTPLACE/vendas_mktplace.xlsx')
